spring.application.name=crm

spring.datasource.url=jdbc:mysql://localhost:3306/crm_db
spring.datasource.username=root
spring.datasource.password=Paddu@05
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate JPA configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.main.allow-bean-definition-overriding=true
case.management.base-url=http://localhost:8081


# Customer-related messages
error.customer.notfound=Customer with ID %d not found
response.customerAdded=Customer added successfully
response.customerUpdated=Customer updated successfully
response.customerDeleted=Customer deleted successfully
response.CustomerById="Customer by their id"

error.note.notfound=Note with ID %d not found
response.noteAdded=Note added successfully
response.noteDeleted=Note deleted successfully


error.invalidInput=Invalid input provided
error.invalid.input=Invalid input provided: %s
error.note.emptyContent=Note content cannot be empty

error.note.not-found=Note not found
response.note.updated=Note updated successfully

error.internalServerError=Internal Server Error
error.resourceNotFound=Resource not found for id: %d

log.customer.add = Adding a new customer with details: %d
log.customer.update = Updating customer with ID: %d
log.customer.delete = Deleting customer with ID: %d
log.customer.getAll = Fetching all customers
log.customer.getById = Fetching customer with ID: %d
log.customer.search = Searching customers with keyword:  %d
error.customer.not-found = Customer not found with ID:  %d


log.note.add = Adding a new note for customer ID:  %d
log.note.getByCustomer = Fetching all notes for customer ID:  %d
log.note.getAll = Fetching all notes
log.note.update = Updating note with ID:  %d
log.note.delete = Deleting note with ID:  %d
log.note.error.emptyContent = Note content is empty or null
log.note.error.notFound = Note not found with ID:  %d
log.customer.error.notFound = Customer not found with ID: %d

case.management.url=http://localhost:8081
log.case.integration.getByCustomerId=Fetching cases for customer with ID: %d
error.case.integration.no-cases-found=No cases found for the given customer ID:  %d
response.customerWithCases=Customer and associated cases retrieved successfully.

log.customer.fetch=Fetching customer with ID: %d
log.customer.noCasesFound=No cases found for customer with ID: %d

# URIs
cases.uri=/cases
cases.getCustomerUri=/cases/customer/
cases.createUri=/cases/customer/
cases.updateUri=/cases/customer/
cases.deleteUri=/cases/

# Logging messages
caseCreationInitiated=Initiating case creation for customer with ID: %d
caseCreatedSuccess=Case created successfully
caseUpdatedSuccess=Case updated successfully
caseDeletedSuccess=Case deleted successfully
customerNotFoundMessage=Customer not found
errorCreatingCase=Error while creating case for customer
errorUpdatingCase=Error while updating case for customer
errorDeletingCase=Error while deleting case for customer
unexpectedError=Unexpected error while creating case for customer: %d
caseRetrievalSuccess=Retrieved cases for customer with ID: %d
errorCreatingCaseWithDetails=Error while creating case for customer: HTTP Status %s, Response Body: %s
unexpectedErrorWhileCreatingCase=Unexpected error while creating case for customer: %s
internalServerError=Internal server error: %s

scheduler.message.fetchCustomerCases=Fetching customer cases as part of scheduled task.
scheduler.message.taskCompleted=Scheduled task completed successfully.

scheduler.message.error=Error occurred during scheduled task: {}


# Cron expressions
scheduler.customerCase.cron=0 0 */5 * * ?



